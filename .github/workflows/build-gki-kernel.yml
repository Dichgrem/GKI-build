name: Build Ace3Pro Kernel

on:
  workflow_dispatch:
    inputs:
      enable_bbr:
        description: "Enable BBR support"
        required: false
        default: "false"
        type: boolean
      enable_kpm:
        description: "Enable KPM support"
        required: false
        default: "false"
        type: boolean
      enable_zram:
        description: "Enable ZRAM support"
        required: false
        default: "false"
        type: boolean
      enable_sched:
        description: "Enable SCHED support"
        required: false
        default: "false"
        type: boolean
      enable_susfs:
        description: "Enable SUSFS support"
        required: false
        default: "false"
        type: boolean
      enable_lsm:
        description: "Enable LSM_BBG support"
        required: false
        default: "false"
        type: boolean
      lto_solution:
        description: "Select the level of lto"
        required: false
        default: "thin"
        type: choice
        options:
          - thin
          - full  
      root_solution:
        description: "Choose root solution to integrate"
        required: false
        default: "sukisu"
        type: choice
        options:
          - sukisu
          - kernelsu
          - kernelsu-next
          - none

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    env:
      ARCH: arm64
      SUBARCH: arm64
      WORKDIR: ${{ github.workspace }}/kernel
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            bc bison build-essential cpio curl flex \
            git libncurses-dev libssl-dev \
            libelf-dev lzop python3 unzip xz-utils \
            zstd rsync ca-certificates wget \
            pahole dwarves zip gcc g++
          gcc --version

      - name: Setup clang toolchains
        run: |
          set -e
          echo "WORKDIR=$WORKDIR"
          mkdir -p "$WORKDIR"
          cd "$WORKDIR"

          # ÂàõÂª∫ÁõÆÂΩïÁªìÊûÑ
          mkdir -p clang-r547379
          mkdir -p anykernel3
          mkdir -p output

          # ‰∏ãËΩΩ Clang Â∑•ÂÖ∑Èìæ
          echo "=== Downloading Clang toolchain ==="
          curl -LO https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master/clang-r547379.tar.gz
          tar -xzf clang-r547379.tar.gz -C clang-r547379
          rm clang-r547379.tar.gz

          # ÂÖãÈöÜ GCC Â∑•ÂÖ∑Èìæ
          echo "=== Cloning GCC toolchains ==="
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 aarch64-linux-android-4.9 --depth=1
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 arm-linux-androideabi-4.9 --depth=1

          echo "‚úÖ Setup toolchains -> OK"

      - name: Clone & Setup Kernel
        run: |
          set -e
          mkdir -p "$WORKDIR"
          cd "$WORKDIR"

          # ÂÖãÈöÜÂÜÖÊ†∏Ê∫êÁ†Å
          echo "üëâ Cloning kernel source"
          rm -rf android_kernel_oneplus_sm8650
          git clone --depth=1 https://github.com/OPACE3PRO/android_kernel_oneplus_sm8650.git android_kernel_oneplus_sm8650

          # ÂÖãÈöÜÊ®°ÂùóÊ∫êÁ†Å
          echo "üëâ Cloning sm8650-modules"
          rm -rf sm8650-modules
          git clone --depth=1 https://github.com/OPACE3PRO/android_kernel_oneplus_sm8650-modules.git sm8650-modules

          echo "‚úÖ Kernel source cloned -> android_kernel_oneplus_sm8650"
          echo "‚úÖ Modules cloned -> sm8650-modules"
          echo "=== Directory setup complete ==="
          ls -la "$WORKDIR"
          
          # ËÆæÁΩÆ KERNEL_DIR ÁéØÂ¢ÉÂèòÈáè
          echo "KERNEL_DIR=android_kernel_oneplus_sm8650" >> $GITHUB_ENV

      - name: Copy and configure config
        run: |
          set -euo pipefail
          echo "WORKDIR=$WORKDIR"
          if [ -z "${KERNEL_DIR:-}" ]; then
            echo "KERNEL_DIR is not set. Ensure previous step set it."
            exit 1
          fi

          SRC="$GITHUB_WORKSPACE/config/config_corvette"
          KERNEL_PATH="$WORKDIR/$KERNEL_DIR"
          TARGET_DIR="$KERNEL_PATH/arch/arm64/configs"
          TARGET="$TARGET_DIR/config_defconfig"

          echo "Copying $SRC -> $TARGET"
          if [ ! -f "$SRC" ]; then
            echo "‚ùå Source config not found: $SRC"
            exit 1
          fi

          mkdir -p "$TARGET_DIR"
          cp -f "$SRC" "$TARGET"

          # Ê†°È™åÁõÆÊ†áÂ≠òÂú®‰∏îÈùûÁ©∫
          if [ -s "$TARGET" ]; then
            echo "‚úÖ OK: $TARGET exists and is non-empty"
            ls -la "$TARGET"
          else
            echo "‚ùå Error: $TARGET missing or empty"
            exit 1
          fi

      - name: Install Root solution
        run: |
          cd "$WORKDIR/$KERNEL_DIR"
          export KCONFIG_CONFIG="$PWD/arch/arm64/configs/config_defconfig"

          echo "üëâ ÈÄâÊã©ÁöÑ Root ÊñπÊ°àÔºö${{ github.event.inputs.root_solution }}"
          case "${{ github.event.inputs.root_solution }}" in
            kernelsu)
              echo "‚úÖ ÈõÜÊàê KernelSU"
              curl -LSs https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh | bash -
              echo "ROOT_SUFFIX=_KernelSU" >> $GITHUB_ENV
              ;;
            kernelsu-next)
              echo "‚úÖ ÈõÜÊàê KernelSU-Next"
              curl -LSs https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh | bash -
              echo "ROOT_SUFFIX=_KernelSU-Next" >> $GITHUB_ENV
              ;;
            sukisu)
              echo "‚úÖ ÈõÜÊàê SukiSU-Ultra"
              curl -LSs https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh | bash -s susfs-main
              echo "ROOT_SUFFIX=_SukiSU" >> $GITHUB_ENV
              ;;
            none)
              echo "‚ÑπÔ∏è Êú™ÈÄâÊã©‰ªª‰Ωï Root ÊñπÊ°àÔºåË∑≥Ëøá"
              ;;
            *)
              echo "‚ùå Êú™Áü•ÁöÑ root_solution: ${{ github.event.inputs.root_solution }}" >&2
              # ÈªòËÆ§ÂÄºÔºåÈÅøÂÖçÊú™ÂÆö‰πâÊó∂Êä•Èîô
              echo "ROOT_SUFFIX=_NoRoot" >> $GITHUB_ENV
              exit 1
              ;;
          esac

      - name: Enable BBR support
        run: |
          if [ "${{ inputs.enable_bbr }}" = "true" ]; then
            echo "‚úÖ Enabling BBR support"
            cd "$WORKDIR/$KERNEL_DIR"

            mkdir -p kernel/configs
            printf '%s\n' \
              '# Fragment config for enabling BBR' \
              'CONFIG_TCP_CONG_ADVANCED=y' \
              'CONFIG_TCP_CONG_BBR=y' \
              'CONFIG_DEFAULT_BBR=y' \
              'CONFIG_DEFAULT_TCP_CONG="bbr"' > kernel/configs/bbr.config

            export ARCH=arm64
            export KCONFIG_CONFIG=arch/arm64/configs/config_defconfig.new

            scripts/kconfig/merge_config.sh -m arch/arm64/configs/config_defconfig kernel/configs/bbr.config
            mv arch/arm64/configs/config_defconfig.new arch/arm64/configs/config_defconfig
            echo "‚úÖ BBR patch step finished"
          else
            echo "‚è© Skipping BBR support (disabled)"
          fi

      - name: Enable KPM support
        run: |
          if [[ "${{ inputs.enable_kpm }}" == "true" && "${{ inputs.root_solution }}" == "sukisu" ]]; then
            echo "‚úÖ Enabling KPM support"
            cd "$WORKDIR/$KERNEL_DIR"
            mkdir -p kernel/configs
            printf '%s\n' \
              '# Fragment config for enabling KPM' \
              'CONFIG_KPM=y' > kernel/configs/kpm.config

            export ARCH=arm64
            export KCONFIG_CONFIG=arch/arm64/configs/config_defconfig.new
            scripts/kconfig/merge_config.sh -m arch/arm64/configs/config_defconfig kernel/configs/kpm.config
            mv arch/arm64/configs/config_defconfig.new arch/arm64/configs/config_defconfig
            echo "‚úÖ KPM config finished"
          else
            echo "‚ÑπÔ∏è KPM patches skipped"
          fi

      - name: Enable ZRAM support
        run: |
          if [ "${{ inputs.enable_zram }}" = "true" ]; then
            echo "‚úÖ Enabling ZRAM support"
            cd $GITHUB_WORKSPACE/kernel/
            git clone https://github.com/ShirkNeko/SukiSU_patch.git
            cd "$WORKDIR/$KERNEL_DIR"

            echo "Ê≠£Âú®ÊãâÂèñZRAMË°•‰∏Å"
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib/
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/
            cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./lib/

            cp ../SukiSU_patch/other/zram/zram_patch/6.1/lz4kd.patch ./
            echo "Ê≠£Âú®Êâìlz4kdË°•‰∏Å"
            patch -p1 -F 3 < lz4kd.patch || true
            echo "‚úÖ lz4kd_patchÂÆåÊàê"
            cp ../SukiSU_patch/other/zram/zram_patch/6.1/lz4k_oplus.patch ./
            echo "Ê≠£Âú®Êâìlz4k_oplusË°•‰∏Å"
            patch -p1 -F 3 < lz4k_oplus.patch || true
            echo "‚úÖ lz4k_oplus_patchÂÆåÊàê"
            
            cd "$WORKDIR/$KERNEL_DIR"

            mkdir -p kernel/configs
            printf '%s\n' \
              '# Fragment config for enabling ZRAM' \
              'CONFIG_CRYPTO_LZ4HC=y' \
              'CONFIG_CRYPTO_LZ4K=y' \
              'CONFIG_CRYPTO_LZ4KD=y' \
              'CONFIG_CRYPTO_842=y' \
              'CONFIG_CRYPTO_LZ4K_OPLUS=y' \
              'CONFIG_ZRAM_WRITEBACK=y' > kernel/configs/zram.config

            export ARCH=arm64
            export KCONFIG_CONFIG=arch/arm64/configs/config_defconfig.new

            scripts/kconfig/merge_config.sh -m arch/arm64/configs/config_defconfig kernel/configs/zram.config
            mv arch/arm64/configs/config_defconfig.new arch/arm64/configs/config_defconfig
            echo "‚úÖ ZRAM patch step finished"
          else
            echo "‚ÑπÔ∏è ZRAM patches skipped"
          fi

      - name: Enable SUSFS support
        run: |
          if [ "${{ inputs.enable_susfs }}" = "true" ]; then
            echo "‚úÖ Enabling SUSFS support"
            cd "$WORKDIR/$KERNEL_DIR"

            echo "üåø Cloning susfs4ksu repository"
            git clone https://gitlab.com/simonpunk/susfs4ksu.git
            cd susfs4ksu
            git checkout origin/gki-android14-6.1

            echo "üìÅ Copying susfs source and headers"
            cp ./kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ../KernelSU/
            cp ./kernel_patches/50_add_susfs_in_gki-android14-6.1.patch ../
            cp ./kernel_patches/fs/* ../fs/
            cp ./kernel_patches/include/linux/* ../include/linux/
            cd ../KernelSU

            echo "üì¶ Applying KernelSU patch"
            patch -p1 --fuzz=3 --ignore-whitespace < 10_enable_susfs_for_ksu.patch || true
            cd ../
            patch -p1 --fuzz=3 --ignore-whitespace < 50_add_susfs_in_gki-android14-6.1.patch || true

            if [ "${{ github.event.inputs.root_solution }}" = "sukisu" ]; then
              echo "üì¶ Applying Fix patches for SukiSU"
              patch -p1 < "$GITHUB_WORKSPACE/patches/fix1.patch"
              patch -p1 < "$GITHUB_WORKSPACE/patches/fix2.patch"
            fi

            mkdir -p kernel/configs
            printf '%s\n' \
              '# Fragment config for enabling SUSFS' \
              'CONFIG_KSU_SUSFS=y' \
              'CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y' \
              'CONFIG_KSU_SUSFS_SUS_PATH=y' \
              'CONFIG_KSU_SUSFS_SUS_MOUNT=y' \
              'CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y' \
              'CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y' \
              'CONFIG_KSU_SUSFS_SUS_KSTAT=y' \
              'CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n' \
              'CONFIG_KSU_SUSFS_TRY_UMOUNT=y' \
              'CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y' \
              'CONFIG_KSU_SUSFS_SPOOF_UNAME=y' \
              'CONFIG_KSU_SUSFS_ENABLE_LOG=y' \
              'CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y' \
              'CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y' \
              'CONFIG_KSU_SUSFS_OPEN_REDIRECT=y' > kernel/configs/susfs.config

            export ARCH=arm64
            export KCONFIG_CONFIG=arch/arm64/configs/config_defconfig.new
            scripts/kconfig/merge_config.sh -m arch/arm64/configs/config_defconfig kernel/configs/susfs.config
            mv arch/arm64/configs/config_defconfig.new arch/arm64/configs/config_defconfig
            echo "‚úÖ SUSFS patch step finished"
          else
            echo "‚ÑπÔ∏è SUSFS patches skipped"
          fi

      - name: Enable SCHED support
        run: |
          if [ "${{ inputs.enable_sched }}" = "true" ]; then
            echo "‚úÖ Enabling SCHED support"
            cd "$WORKDIR/$KERNEL_DIR"
            git clone https://github.com/HanKuCha/sched_ext.git
            cp -r ./sched_ext/* ./kernel/sched
            rm -rf ./sched_ext/.git
            echo "‚úÖ SCHED patch step finished"
            cd ./kernel/sched
            ls -la
          else
           echo "‚ÑπÔ∏è SCHED skipped"
          fi

      - name: Enable LSM_BBG support
        run: |
          if [ "${{ inputs.enable_lsm }}" = "true" ]; then
            cd "$WORKDIR/$KERNEL_DIR"
            echo "‚úÖ Enabling LSM_BBG support"
            wget -O- https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh | bash
            sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/landlock/landlock,baseband_guard/ } }' security/Kconfig
            
            mkdir -p kernel/configs
            printf '%s\n' \
              '# Fragment config for enabling LSM' \
              'CONFIG_BBG=y' > kernel/configs/lsm.config

            export ARCH=arm64
            export KCONFIG_CONFIG=arch/arm64/configs/config_defconfig.new
            scripts/kconfig/merge_config.sh -m arch/arm64/configs/config_defconfig kernel/configs/lsm.config
            mv arch/arm64/configs/config_defconfig.new arch/arm64/configs/config_defconfig
            echo "‚úÖ LSM_BBG step finished"
          else
           echo "‚ÑπÔ∏è LSM_BBG skipped"
          fi

      - name: Build kernel
        run: |
          set -euo pipefail
          cd "$WORKDIR/$KERNEL_DIR"
          echo "=== Build start ==="
          starttime=$(date +'%Y-%m-%d %H:%M:%S')
          echo "Build started at: $starttime"
          
          # Âü∫Êú¨ÂèòÈáè
          export ARCH=arm64
          export SUBARCH=arm64
          export OUT=out
          export KERNEL_DEFCONFIG=config_defconfig

          # ÈªòËÆ§ LTO ‰∏∫ thin
          export LTO="${{ inputs.lto_solution || 'thin' }}"
          echo "‚úÖ LTO mode: $LTO"

          # Â∑•ÂÖ∑ÈìæË∑ØÂæÑ
          export CLANG_PATH="$WORKDIR/clang-r547379"
          export GCC64_PATH="$WORKDIR/aarch64-linux-android-4.9"
          export GCC32_PATH="$WORKDIR/arm-linux-androideabi-4.9"

          # Â∞ÜÂ∑•ÂÖ∑ÈìæÂä†ÂÖ• PATH
          export PATH="${CLANG_PATH}/bin:${GCC64_PATH}/bin:${GCC32_PATH}/bin:${PATH}"

          # CLANG stack frame limit
          export CLANG_MAX_STACK_SIZE=8192
          export KCFLAGS="-Wno-error=frame-larger-than"

          echo "Using CLANG_PATH=$CLANG_PATH"
          which clang || true
          clang --version || true

          # Ê∏ÖÁêÜËæìÂá∫ÁõÆÂΩï
          rm -rf "$OUT" && mkdir -p "$OUT"

          # ÁîüÊàê defconfig
          echo "=== make O=${OUT} ${KERNEL_DEFCONFIG} ==="
          make O=${OUT} ARCH=${ARCH} ${KERNEL_DEFCONFIG}
          if [ $? -ne 0 ]; then
            echo "‚ùå make ${KERNEL_DEFCONFIG} failed"
            exit 1
          fi

          # Â§ÑÁêÜ LTO (none/thin/full)
          if [ "${LTO}" = "none" ] || [ "${LTO}" = "thin" ] || [ "${LTO}" = "full" ]; then
            echo "Applying LTO=${LTO} to ${OUT}/.config"
            if [ "${LTO}" = "none" ]; then
              scripts/config --file ${OUT}/.config -d LTO_CLANG -e LTO_NONE -d LTO_CLANG_THIN -d LTO_CLANG_FULL -d THINLTO
            elif [ "${LTO}" = "thin" ]; then
              scripts/config --file ${OUT}/.config -e LTO_CLANG -d LTO_NONE -e LTO_CLANG_THIN -d LTO_CLANG_FULL -e THINLTO
            else
              scripts/config --file ${OUT}/.config -e LTO_CLANG -d LTO_NONE -d LTO_CLANG_THIN -e LTO_CLANG_FULL -d THINLTO
            fi
            grep -E "LTO_CLANG|LTO_NONE|LTO_CLANG_THIN|LTO_CLANG_FULL|THINLTO" ${OUT}/.config || true
          else
            echo "Invalid LTO value: ${LTO}. Use none|thin|full."
            exit 1
          fi

          # ÊûÑÂª∫ÂèÇÊï∞
          TH_COUNT=$(nproc)
          echo "Using ${TH_COUNT} parallel jobs"
          DEF_ARGS="O=${OUT} \
          ARCH=${ARCH} \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=arm-linux-gnueabi- \
          CC=${CLANG_PATH}/bin/clang \
          AR=${CLANG_PATH}/bin/llvm-ar \
          NM=${CLANG_PATH}/bin/llvm-nm \
          LD=${CLANG_PATH}/bin/ld.lld \
          HOSTCC=${CLANG_PATH}/bin/clang \
          HOSTCXX=${CLANG_PATH}/bin/clang++ \
          OBJCOPY=${CLANG_PATH}/bin/llvm-objcopy \
          OBJDUMP=${CLANG_PATH}/bin/llvm-objdump \
          READELF=${CLANG_PATH}/bin/llvm-readelf \
          OBJSIZE=${CLANG_PATH}/bin/llvm-size \
          STRIP=${CLANG_PATH}/bin/llvm-strip \
          LLVM_IAS=1 \
          LLVM=1 \
          KCFLAGS=\"${KCFLAGS}\""

          BUILD_ARGS="-j${TH_COUNT} ${DEF_ARGS}"

          echo "=== Start make (logging to ${OUT}/error.log) ==="
          rm android/abi_gki_protected_exports_* || true
          make ${BUILD_ARGS} 2>&1 | tee ${OUT}/error.log || true

          echo "=== Tail of build log ==="
          tail -n 200 ${OUT}/error.log || true

          endtime=$(date +'%Y-%m-%d %H:%M:%S')
          echo "Build started at: $starttime"
          echo "Build finished at: $endtime"
          echo "=== Build step finished (check out/error.log for full log) ==="

      - name: Check build results
        run: |
          set -euo pipefail
          cd "$WORKDIR/$KERNEL_DIR"
          echo "=== Build Results ==="
          if [ -f "out/arch/arm64/boot/Image" ]; then
            echo "‚úÖ Kernel build successful!"
            ls -la out/arch/arm64/boot/
            ls -la out/vmlinux || true
            du -h out/arch/arm64/boot/Image || true
          else
            echo "‚ùå Kernel build failed!"
            echo "=== Last 200 lines of error log ==="
            if [ -f out/error.log ]; then
              tail -n 200 out/error.log
              echo "=== Error summary (last 20 matching lines) ==="
              grep -iE "error|failed|stop" out/error.log | tail -20 || true
            else
              echo "No out/error.log found"
            fi
            exit 1
          fi

      - name: Apply KPM patches
        run: |
          if [[ "${{ inputs.enable_kpm }}" == "true" && "${{ inputs.root_solution }}" == "sukisu" ]]; then
            cd $GITHUB_WORKSPACE/kernel/android_kernel_oneplus_sm8650/out/arch/arm64/boot
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
            chmod 777 patch
            ./patch
            rm -rf Image
            mv oImage Image
            echo "‚úÖ KPM patch finished"
          else
           echo "‚ÑπÔ∏è SCHED skipped"
          fi

      - name: Replace Image in anykernel3
        run: |
          set -e

          WORKDIR=ak3_work
          ZIP_ORIG=anykernel3.zip
          NEW_ZIP=anykernel3-${{ github.run_number }}.zip
          NEW_IMAGE=kernel/${{ env.KERNEL_DIR }}/out/arch/arm64/boot/Image

          # ÂàõÂª∫‰∏¥Êó∂Â∑•‰ΩúÁõÆÂΩï
          rm -rf $WORKDIR
          mkdir -p $WORKDIR
          cd $WORKDIR

          # Ëß£ÂéãÂéüÂà∑Êú∫ÂåÖÔºå‰øùÊåÅÁõÆÂΩïÁªìÊûÑÂíåÊùÉÈôê
          unzip ../$ZIP_ORIG

          # ÊõøÊç¢ Image Âπ∂ËÆæÁΩÆÊùÉÈôê 755
          cp ../$NEW_IMAGE ./Image
          chmod 755 Image

          # ÈáçÊñ∞ÊâìÂåÖÂà∑Êú∫ÂåÖ
          zip -r ../$NEW_ZIP . -x ".*"

          cd ..

          # È™åËØÅÊñ∞ ZIP ÁªìÊûÑ
          echo "=== Êñ∞Âà∑Êú∫ÂåÖ‰ø°ÊÅØ ==="
          zipinfo $NEW_ZIP

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: kernel-build-${{ github.run_number }}${{ env.ROOT_SUFFIX }}
          path: |
              ${{ github.workspace }}/kernel/${{ env.KERNEL_DIR }}/out/arch/arm64/boot/Image*
              ${{ github.workspace }}/kernel/${{ env.KERNEL_DIR }}/out/arch/arm64/boot/dts/*/*.dtb
              ${{ github.workspace }}/kernel/${{ env.KERNEL_DIR }}/out/error.log
              ${{ github.workspace }}/kernel/${{ env.KERNEL_DIR }}/out/.config
              ${{ github.workspace }}/kernel/output/kernel_info.txt

      - name: Set package name
        run: |
          PKG_NAME="anykernel3-${{ github.run_number }}"
          [[ "${{ inputs.enable_bbr }}" == "true" ]] && PKG_NAME="${PKG_NAME}_bbr"
          [[ "${{ inputs.enable_kpm }}" == "true" ]] && PKG_NAME="${PKG_NAME}_kpm"
          [[ "${{ inputs.enable_zram }}" == "true" ]] && PKG_NAME="${PKG_NAME}_zram"
          [[ "${{ inputs.enable_sched }}" == "true" ]] && PKG_NAME="${PKG_NAME}_sched"
          [[ "${{ inputs.enable_susfs }}" == "true" ]] && PKG_NAME="${PKG_NAME}_susfs"
          [[ "${{ inputs.enable_lsm }}" == "true" ]] && PKG_NAME="${PKG_NAME}_lsm"
          [[ "${{ inputs.root_solution }}" != "none" ]] && PKG_NAME="${PKG_NAME}_${{ inputs.root_solution }}"
          PKG_NAME="${PKG_NAME}_lto-${{ inputs.lto_solution }}"
          echo "PKG_NAME=$PKG_NAME" >> $GITHUB_ENV

      - name: Upload AnyKernel3 package
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ github.workspace }}/anykernel3-${{ github.run_number }}.zip